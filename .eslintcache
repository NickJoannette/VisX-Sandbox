[{"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\App.js":"1","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\index.tsx":"2","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\Pie.tsx":"3","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\reportWebVitals.js":"4","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\testData.js":"5","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\visibleComponent.tsx":"6","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\componentExplanation.tsx":"7","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\parent.tsx":"8"},{"size":286,"mtime":1609731556159,"results":"9","hashOfConfig":"10"},{"size":13123,"mtime":1609831921245,"results":"11","hashOfConfig":"10"},{"size":9382,"mtime":1609830183992,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609729153392,"results":"14","hashOfConfig":"10"},{"size":88607,"mtime":1609736917615,"results":"15","hashOfConfig":"10"},{"size":356,"mtime":1609818035928,"results":"16","hashOfConfig":"10"},{"size":2788,"mtime":1609824899756,"results":"17","hashOfConfig":"13"},{"size":699,"mtime":1609823814704,"results":"18","hashOfConfig":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d04ddj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z8uwqd",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\App.js",[],"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\index.tsx",["36","37","38","39","40","41","42","43","44","45","46","47"],"import React, {FunctionComponent } from 'react';\nimport { render } from 'react-dom';\nimport ParentSize from '@visx/responsive/lib/components/ParentSize';\nimport App from './App';\nimport VisibleComponent from './visibleComponent';\nimport ComponentExplanation from './componentExplanation';\nimport Parent from './parent';\nimport styles from './mystyle.module.css';\n\nimport { animated, useTransition, interpolate } from 'react-spring';\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\nimport { scaleOrdinal } from '@visx/scale';\nimport { Group } from '@visx/group';\nimport { GradientPinkBlue } from '@visx/gradient';\nimport letterFrequency, { LetterFrequency } from '@visx/mock-data/lib/mocks/letterFrequency';\nimport browserUsage, { BrowserUsage as Browsers } from '@visx/mock-data/lib/mocks/browserUsage';\n\n\nvar slide = 0;\n\n// data and types\ntype BrowserNames = keyof Browsers;\n\ninterface BrowserUsage {\n    label: BrowserNames;\n    usage: number;\n}\n\nconst letters: LetterFrequency[] = letterFrequency.slice(0, 4);\nconst browserNames = Object.keys(browserUsage[0]).filter(k => k !== 'date') as BrowserNames[];\nconst browsers: BrowserUsage[] = browserNames.map(name => ({\n    label: name,\n    usage: Number(browserUsage[0][name]),\n}));\n\n// accessor functions\nconst usage = (d: BrowserUsage) => d.usage;\nconst frequency = (d: LetterFrequency) => d.frequency;\n\n// color scales\nconst getBrowserColor = scaleOrdinal({\n    domain: browserNames,\n    range: [\n        'rgba(234,235,255,0.7)',\n        'rgba(234,235,255,0.6)',\n        'rgba(234,235,255,0.5)',\n        'rgba(234,235,255,0.4)',\n        'rgba(234,235,255,0.3)',\n        'rgba(234,235,255,0.2)',\n        'rgba(234,235,255,0.1)',\n    ],\n});\nconst getLetterFrequencyColor = scaleOrdinal({\n    domain: letters.map(l => l.letter),\n    range: ['rgba(60,69,93,0.9)', 'rgba(60,69,93,0.8)', 'rgba(60,69,93,0.6)', 'rgba(60,69,93,0.4)'],\n});\n\nconst defaultMargin = { top: 20, right: 20, bottom: 20, left: 20 };\n\nexport type PieProps = {\n    width: number;\n    height: number;\n    margin?: typeof defaultMargin;\n    animate?: boolean;\n};\n\nexport default function Example({\n                                    width,\n                                    height,\n                                    margin = defaultMargin,\n                                    animate = true,\n                                }: PieProps) {\n    const [selectedBrowser, setSelectedBrowser] = React.useState<string | null>(null);\n    const [selectedAlphabetLetter, setSelectedAlphabetLetter] =  React.useState<string | null>(null);\n\n    if (width < 10) return null;\n\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    const radius = Math.min(innerWidth, innerHeight) / 2;\n    const centerY = innerHeight / 2;\n    const centerX = innerWidth / 2;\n    const donutThickness = 50;\n\n    return (\n        <svg width={width} height={height}>\n            <GradientPinkBlue id=\"visx-pie-gradient\" />\n            <rect rx={14} width={width} height={height} fill='rgba(0,0,0,1.0)' />\n            <Group top={centerY + margin.top} left={centerX + margin.left}>\n                <Pie\n                    data={\n                        selectedBrowser ? browsers.filter(({ label }) => label === selectedBrowser) : browsers\n                    }\n                    pieValue={usage}\n                    outerRadius={radius}\n                    innerRadius={radius - donutThickness}\n                    cornerRadius={3}\n                    padAngle={0.005}\n                >\n                    {pie => (\n                        <AnimatedPie<BrowserUsage>\n                            {...pie}\n                            animate={animate}\n                            getKey={arc => arc.data.label}\n                            onClickDatum={({ data: { label } }) =>\n                                animate &&\n                                setSelectedBrowser(selectedBrowser && selectedBrowser === label ? null : label)\n                            }\n                            getColor={arc => getBrowserColor(arc.data.label)}\n                        />\n                    )}\n                </Pie>\n                <Pie\n                    data={\n                        selectedAlphabetLetter\n                            ? letters.filter(({ letter }) => letter === selectedAlphabetLetter)\n                            : letters\n                    }\n                    pieValue={frequency}\n                    pieSortValues={() => -1}\n                    outerRadius={radius - donutThickness * 1.3}\n                >\n                    {pie => (\n                        <AnimatedPie<LetterFrequency>\n                            {...pie}\n                            animate={animate}\n                            getKey={({ data: { letter } }) => letter}\n                            onClickDatum={({ data: { letter } }) =>\n                                animate &&\n                                setSelectedAlphabetLetter(\n                                    selectedAlphabetLetter && selectedAlphabetLetter === letter ? null : letter,\n                                )\n                            }\n                            getColor={({ data: { letter } }) => getLetterFrequencyColor(letter)}\n                        />\n                    )}\n                </Pie>\n            </Group>\n            {animate && (\n                <text\n                    textAnchor=\"end\"\n                    x={width - 16}\n                    y={height - 16}\n                    fill=\"white\"\n                    fontSize={11}\n                    fontWeight={300}\n                    pointerEvents=\"none\"\n                >\n                    Portfolio View\n                </text>\n            )}\n        </svg>\n    );\n}\n\n// react-spring transition definitions\ntype AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };\n\nconst fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({\n    // enter from 360° if end angle is > 180°\n    startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n    endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\n    opacity: 0,\n});\nconst enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({\n    startAngle,\n    endAngle,\n    opacity: 1,\n});\n\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\n    animate?: boolean;\n    getKey: (d: PieArcDatum<Datum>) => string;\n    getColor: (d: PieArcDatum<Datum>) => string;\n    onClickDatum: (d: PieArcDatum<Datum>) => void;\n    delay?: number;\n};\n\nfunction AnimatedPie<Datum>({\n                                animate,\n                                arcs,\n                                path,\n                                getKey,\n                                getColor,\n                                onClickDatum,\n                            }: AnimatedPieProps<Datum>) {\n    const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(\n        arcs,\n        getKey,\n        // @ts-ignore react-spring doesn't like this overload\n        {\n            from: animate ? fromLeaveTransition : enterUpdateTransition,\n            enter: enterUpdateTransition,\n            update: enterUpdateTransition,\n            leave: animate ? fromLeaveTransition : enterUpdateTransition,\n        },\n    );\n    return (\n        <>\n            {transitions.map(\n                ({\n                     item: arc,\n                     props,\n                     key,\n                 }: {\n                    item: PieArcDatum<Datum>;\n                    props: AnimatedStyles;\n                    key: string;\n                }) => {\n                    const [centroidX, centroidY] = path.centroid(arc);\n                    const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\n\n                    return (\n                        <g key={key}>\n                            <animated.path\n                                // compute interpolated path d attribute from intermediate angle values\n                                d={interpolate([props.startAngle, props.endAngle], (startAngle, endAngle) =>\n                                    path({\n                                        ...arc,\n                                        startAngle,\n                                        endAngle,\n                                    }),\n                                )}\n                                fill={getColor(arc)}\n                                onClick={() => onClickDatum(arc)}\n                                onTouchStart={() => onClickDatum(arc)}\n                            />\n                            {hasSpaceForLabel && (\n                                <animated.g style={{ opacity: props.opacity }}>\n                                    <text\n                                        fill=\"white\"\n                                        x={centroidX}\n                                        y={centroidY}\n                                        dy=\".33em\"\n                                        fontSize={11}\n                                        textAnchor=\"middle\"\n                                        pointerEvents=\"none\"\n                                    >\n                                        {getKey(arc)}\n                                    </text>\n                                </animated.g>\n                            )}\n                        </g>\n                    );\n                },\n            )}\n        </>\n    );\n}\n\n\ntype CardProps = {\n    title: string,\n    paragraph: string\n}\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\ntype ClockState = {\n    input: string\n    time: Date\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport class Clock extends React.Component<{}, ClockState> {\n\n    // The tick function sets the current state. TypeScript will let us know\n    // which ones we are allowed to set.\n    tick() {\n        this.setState({\n            time: new Date()\n        });\n    }\n\n    // Before the component mounts, we initialise our state\n    componentWillMount() {\n        this.tick();\n    }\n\n    // After the component did mount, we set the state each second.\n    componentDidMount() {\n        setInterval(() => this.tick(), 1000);\n    }\n\n    // render will know everything!\n    render() {\n        return <p>The current time is {this.state.time.toLocaleTimeString()}</p>\n    }\n}\n\n// we can use children even though we haven't defined them in our CardProps\nexport const Card: FunctionComponent<CardProps> = ({ title, paragraph, children }) => <aside>\n    <h2>{ title }</h2>\n    <p>\n        { paragraph }\n    </p>\n    { children }\n</aside>\n\nconst el = <Card title=\"Welcome!\" paragraph=\"To this example\" />\n\n\n\n\n\n\n\n\n\ntype NoticeProps = {\n    msg: string\n}\n\nexport class Notice extends React.Component<NoticeProps> {\n\n    constructor(props: NoticeProps) {\n        super(props)\n    }\n\n    static defaultProps = {\n        msg: 'Hello everyone!'\n    }\n\n    render() {\n        return <p>{ this.props.msg }</p>\n    }\n}\n\nconst noticeEl = <Notice /> // Will compile in TS 3.0\n\n\n\n\n\n\ntype WrapperProps = {\n    clockEl : Clock\n}\n\nexport class Wrapper extends React.Component {\n\n\n    render() {\n        return <div style={ { display: 'flex' } }>\n            { this.props.children }\n        </div>\n    }\n}\n\nconst pieEl = <Example width={900} height={900}/>\nexport class Button extends React.Component<{},{clicks:number}> {\n    constructor(props: {} | Readonly<{}>){\n        super(props);\n        this.state = {\n            clicks: 0\n        }\n    }\n\n    handleClick(event: MouseEvent) {\n        event.preventDefault();\n\n        this.setState((prevState) => ({\n            // @ts-ignore\n            clicks: prevState.clicks + 1\n              }));\n\n        //this.setState({clicks:this.state.clicks+1 })\n        //alert(event.currentTarget.tagName); // alerts BUTTON\n    }\n\n    render(){\n        const mystyle = {\n            color: \"white\",\n            backgroundColor: \"DodgerBlue\",\n            padding: \"10px\",\n            fontFamily: \"Arial\"\n        };\n        return (\n\n            <div>\n                <div style={{float:\"left\"}}>\n                    {true ? <Example width={500} height={500}/> : null}\n                </div>\n                <div style={{float:\"left\"}}>\n                    <button className={styles.button1}\n                        // @ts-ignore\n                            onClick={this.handleClick.bind(this)}>\n                        <h2>Button1 + {this.state.clicks}</h2>\n                    </button>\n                </div>\n\n            </div>\n        )\n        // @ts-ignore\n      /*  return (<button id=\"button1\" onClick={this.handleClick.bind(this)}>\n            <h2>Button1 + {this.state.clicks}</h2>\n        </button>\n        )*/\n    }\n}\n\n\n\n\nrender (<Button />,document.getElementById('wrap'))\n\n// Nothing should be rendered!\n/*\nconsole.log(\"Clicks\")\nrender(<Parent />,document.getElementById('root'))\n*/","D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\Pie.tsx",[],"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\reportWebVitals.js",[],"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\testData.js",["48"],"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\visibleComponent.tsx",["49","50","51","52"],"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\componentExplanation.tsx",["53","54","55","56"],"D:\\Work_\\React_Viz_Sandbox\\visx-sandbox\\src\\parent.tsx",["57","58","59"],{"ruleId":"60","severity":1,"message":"61","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":18},{"ruleId":"60","severity":1,"message":"64","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":11},{"ruleId":"60","severity":1,"message":"65","line":5,"column":8,"nodeType":"62","messageId":"63","endLine":5,"endColumn":24},{"ruleId":"60","severity":1,"message":"66","line":6,"column":8,"nodeType":"62","messageId":"63","endLine":6,"endColumn":28},{"ruleId":"60","severity":1,"message":"67","line":7,"column":8,"nodeType":"62","messageId":"63","endLine":7,"endColumn":14},{"ruleId":"60","severity":1,"message":"68","line":19,"column":5,"nodeType":"62","messageId":"63","endLine":19,"endColumn":10},{"ruleId":"60","severity":1,"message":"69","line":301,"column":7,"nodeType":"62","messageId":"63","endLine":301,"endColumn":9},{"ruleId":"70","severity":1,"message":"71","line":317,"column":5,"nodeType":"72","messageId":"73","endLine":319,"endColumn":6},{"ruleId":"60","severity":1,"message":"74","line":330,"column":7,"nodeType":"62","messageId":"63","endLine":330,"endColumn":15},{"ruleId":"60","severity":1,"message":"75","line":337,"column":6,"nodeType":"62","messageId":"63","endLine":337,"endColumn":18},{"ruleId":"60","severity":1,"message":"76","line":351,"column":7,"nodeType":"62","messageId":"63","endLine":351,"endColumn":12},{"ruleId":"60","severity":1,"message":"77","line":373,"column":15,"nodeType":"62","messageId":"63","endLine":373,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","messageId":"81","endLine":1,"endColumn":14,"fix":"82"},{"ruleId":"60","severity":1,"message":"83","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"64","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":11},{"ruleId":"60","severity":1,"message":"84","line":7,"column":9,"nodeType":"62","messageId":"63","endLine":7,"endColumn":18},{"ruleId":"60","severity":1,"message":"85","line":8,"column":11,"nodeType":"62","messageId":"63","endLine":8,"endColumn":22},{"ruleId":"60","severity":1,"message":"83","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":2,"column":8,"nodeType":"62","messageId":"63","endLine":2,"endColumn":24},{"ruleId":"60","severity":1,"message":"86","line":6,"column":5,"nodeType":"62","messageId":"63","endLine":6,"endColumn":7},{"ruleId":"87","severity":1,"message":"88","line":80,"column":13,"nodeType":"89","endLine":80,"endColumn":23},{"ruleId":"60","severity":1,"message":"83","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":2,"column":8,"nodeType":"62","messageId":"63","endLine":2,"endColumn":24},{"ruleId":"87","severity":1,"message":"88","line":22,"column":9,"nodeType":"89","endLine":22,"endColumn":22},"@typescript-eslint/no-unused-vars","'ParentSize' is defined but never used.","Identifier","unusedVar","'App' is defined but never used.","'VisibleComponent' is defined but never used.","'ComponentExplanation' is defined but never used.","'Parent' is defined but never used.","'slide' is assigned a value but never used.","'el' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'noticeEl' is assigned a value but never used.","'WrapperProps' is defined but never used.","'pieEl' is assigned a value but never used.","'mystyle' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"90","text":"91"},"'useState' is defined but never used.","'testState' is assigned a value but never used.","'slideNumber' is assigned a value but never used.","'kx' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",[0,13],""]