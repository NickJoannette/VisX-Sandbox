{"version":3,"sources":["Pie.tsx","AreaChart.tsx","AreaChartComponent.tsx","index.tsx"],"names":["letters","letterFrequency","slice","browserNames","Object","keys","browserUsage","filter","k","browsers","map","name","label","usage","Number","d","frequency","getBrowserColor","scaleOrdinal","domain","range","getLetterFrequencyColor","l","letter","defaultMargin","top","right","bottom","left","Example","width","height","margin","animate","useState","selectedBrowser","setSelectedBrowser","selectedAlphabetLetter","setSelectedAlphabetLetter","innerWidth","innerHeight","radius","Math","min","centerY","centerX","GradientPinkBlue","id","rx","fill","Group","data","pieValue","outerRadius","innerRadius","cornerRadius","padAngle","pie","AnimatedPie","getKey","arc","onClickDatum","getColor","pieSortValues","donutThickness","textAnchor","x","y","fontSize","fontWeight","pointerEvents","fromLeaveTransition","endAngle","startAngle","PI","opacity","enterUpdateTransition","arcs","path","transitions","useTransition","from","enter","update","leave","item","props","key","centroid","centroidX","centroidY","hasSpaceForLabel","interpolate","onClick","onTouchStart","g","style","dy","axisColor","axisBottomTickLabelProps","fontFamily","axisLeftTickLabelProps","dx","AreaChart","gradientColor","yMax","xScale","yScale","hideBottomAxis","hideLeftAxis","children","LinearGradient","fromOpacity","to","toOpacity","AreaClosed","Date","date","getDate","close","getStockValue","strokeWidth","stroke","curve","curveMonotoneX","AxisBottom","scale","numTicks","tickStroke","tickLabelProps","AxisLeft","stock","appleStock","brushMargin","PATTERN_ID","GRADIENT_ID","background2","selectedBrushStyle","BrushChart","compact","brushRef","useRef","filteredStock","setFilteredStock","topChartBottomMargin","chartSeparation","topChartHeight","bottomChartHeight","xMax","max","xBrushMax","yBrushMax","dateScale","useMemo","scaleTime","extent","stockScale","scaleLinear","nice","brushDateScale","brushStockScale","initialBrushPosition","start","end","rotate","orientation","Brush","handleSize","innerRef","resizeTriggerAreas","brushDirection","onChange","x0","x1","y0","y1","stockCopy","s","getTime","selectedBoxStyle","Clock","this","setState","time","tick","setInterval","state","toLocaleTimeString","React","Component","Card","title","paragraph","Notice","msg","defaultProps","h1Styles","display","padding","boxSizing","borderRadius","border","textDecoration","transition","backgroundColor","float","color","font","titleStyle","textAlign","explanationStyle","PieExplanation","BrushExplanation","Wrapper","Button","clicks","event","preventDefault","prevState","paddingTop","paddingLeft","window","handleClick2","bind","handleClick","render","document","getElementById"],"mappings":"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","file":"static/js/main.90af2872.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\r\nimport { scaleOrdinal } from '@visx/scale';\r\nimport { Group } from '@visx/group';\r\nimport { GradientPinkBlue } from '@visx/gradient';\r\nimport letterFrequency, { LetterFrequency } from '@visx/mock-data/lib/mocks/letterFrequency';\r\nimport browserUsage, { BrowserUsage as Browsers } from '@visx/mock-data/lib/mocks/browserUsage';\r\n\r\nimport { animated, useTransition, interpolate } from 'react-spring';\r\n\r\n// data and types\r\ntype BrowserNames = keyof Browsers;\r\n\r\ninterface BrowserUsage {\r\n    label: BrowserNames;\r\n    usage: number;\r\n}\r\n\r\nconst letters: LetterFrequency[] = letterFrequency.slice(0, 4);\r\nconst browserNames = Object.keys(browserUsage[0]).filter(k => k !== 'date') as BrowserNames[];\r\nconst browsers: BrowserUsage[] = browserNames.map(name => ({\r\n    label: name,\r\n    usage: Number(browserUsage[0][name]),\r\n}));\r\n\r\n// accessor functions\r\nconst usage = (d: BrowserUsage) => d.usage;\r\nconst frequency = (d: LetterFrequency) => d.frequency;\r\n\r\n// color scales\r\nconst getBrowserColor = scaleOrdinal({\r\n    domain: browserNames,\r\n    range: [\r\n        'rgba(34,235,255,0.7)',\r\n        'rgba(34,235,255,0.6)',\r\n        'rgba(34,235,255,0.5)',\r\n        'rgba(34,235,255,0.4)',\r\n        'rgba(34,235,255,0.3)',\r\n        'rgba(34,235,255,0.2)',\r\n        'rgba(34,235,255,0.1)',\r\n    ],\r\n});\r\nconst getLetterFrequencyColor = scaleOrdinal({\r\n    domain: letters.map(l => l.letter),\r\n    range: ['rgba(60,69,93,0.9)', 'rgba(60,69,93,0.8)', 'rgba(60,69,93,0.6)', 'rgba(60,69,93,0.4)'],\r\n});\r\n\r\nconst defaultMargin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n\r\nexport type PieProps = {\r\n    width: number;\r\n    height: number;\r\n    margin?: typeof defaultMargin;\r\n    animate?: boolean;\r\n};\r\n\r\nexport default function Example({\r\n                                    width,\r\n                                    height,\r\n                                    margin = defaultMargin,\r\n                                    animate = true,\r\n                                }: PieProps) {\r\n    const [selectedBrowser, setSelectedBrowser] = useState<string | null>(null);\r\n    const [selectedAlphabetLetter, setSelectedAlphabetLetter] = useState<string | null>(null);\r\n\r\n    if (width < 10) return null;\r\n\r\n    const innerWidth = width - margin.left - margin.right;\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n    const radius = Math.min(innerWidth, innerHeight) / 2;\r\n    const centerY = innerHeight / 2;\r\n    const centerX = innerWidth / 2;\r\n    const donutThickness = 50;\r\n\r\n    return (\r\n        <svg width={width} height={height}>\r\n            <GradientPinkBlue id=\"visx-pie-gradient\" />\r\n            <rect rx={14} width={width} height={height} fill='rgba(0,0,0,1.0)' />\r\n            <Group top={centerY + margin.top} left={centerX + margin.left}>\r\n                <Pie\r\n                    data={\r\n                        selectedBrowser ? browsers.filter(({ label }) => label === selectedBrowser) : browsers\r\n                    }\r\n                    pieValue={usage}\r\n                    outerRadius={radius}\r\n                    innerRadius={radius - donutThickness}\r\n                    cornerRadius={3}\r\n                    padAngle={0.005}\r\n                >\r\n                    {pie => (\r\n                        <AnimatedPie<BrowserUsage>\r\n                            {...pie}\r\n                            animate={animate}\r\n                            getKey={arc => arc.data.label}\r\n                            onClickDatum={({ data: { label } }) =>\r\n                                animate &&\r\n                                setSelectedBrowser(selectedBrowser && selectedBrowser === label ? null : label)\r\n                            }\r\n                            getColor={arc => getBrowserColor(arc.data.label)}\r\n                        />\r\n                    )}\r\n                </Pie>\r\n                <Pie\r\n                    data={\r\n                        selectedAlphabetLetter\r\n                            ? letters.filter(({ letter }) => letter === selectedAlphabetLetter)\r\n                            : letters\r\n                    }\r\n                    pieValue={frequency}\r\n                    pieSortValues={() => -1}\r\n                    outerRadius={radius - donutThickness * 1.3}\r\n                >\r\n                    {pie => (\r\n                        <AnimatedPie<LetterFrequency>\r\n                            {...pie}\r\n                            animate={animate}\r\n                            getKey={({ data: { letter } }) => letter}\r\n                            onClickDatum={({ data: { letter } }) =>\r\n                                animate &&\r\n                                setSelectedAlphabetLetter(\r\n                                    selectedAlphabetLetter && selectedAlphabetLetter === letter ? null : letter,\r\n                                )\r\n                            }\r\n                            getColor={({ data: { letter } }) => getLetterFrequencyColor(letter)}\r\n                        />\r\n                    )}\r\n                </Pie>\r\n            </Group>\r\n            {animate && (\r\n                <text\r\n                    textAnchor=\"end\"\r\n                    x={width - 16}\r\n                    y={height - 16}\r\n                    fill=\"white\"\r\n                    fontSize={11}\r\n                    fontWeight={300}\r\n                    pointerEvents=\"none\"\r\n                >\r\n                    Portfolio View\r\n                </text>\r\n            )}\r\n        </svg>\r\n    );\r\n}\r\n\r\n// react-spring transition definitions\r\ntype AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };\r\n\r\nconst fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({\r\n    // enter from 360° if end angle is > 180°\r\n    startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\r\n    endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,\r\n    opacity: 0,\r\n});\r\nconst enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({\r\n    startAngle,\r\n    endAngle,\r\n    opacity: 1,\r\n});\r\n\r\ntype AnimatedPieProps<Datum> = ProvidedProps<Datum> & {\r\n    animate?: boolean;\r\n    getKey: (d: PieArcDatum<Datum>) => string;\r\n    getColor: (d: PieArcDatum<Datum>) => string;\r\n    onClickDatum: (d: PieArcDatum<Datum>) => void;\r\n    delay?: number;\r\n};\r\n\r\nfunction AnimatedPie<Datum>({\r\n                                animate,\r\n                                arcs,\r\n                                path,\r\n                                getKey,\r\n                                getColor,\r\n                                onClickDatum,\r\n                            }: AnimatedPieProps<Datum>) {\r\n    const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(\r\n        arcs,\r\n        getKey,\r\n        // @ts-ignore react-spring doesn't like this overload\r\n        {\r\n            from: animate ? fromLeaveTransition : enterUpdateTransition,\r\n            enter: enterUpdateTransition,\r\n            update: enterUpdateTransition,\r\n            leave: animate ? fromLeaveTransition : enterUpdateTransition,\r\n        },\r\n    );\r\n    return (\r\n        <>\r\n            {transitions.map(\r\n                ({\r\n                     item: arc,\r\n                     props,\r\n                     key,\r\n                 }: {\r\n                    item: PieArcDatum<Datum>;\r\n                    props: AnimatedStyles;\r\n                    key: string;\r\n                }) => {\r\n                    const [centroidX, centroidY] = path.centroid(arc);\r\n                    const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;\r\n\r\n                    return (\r\n                        <g key={key}>\r\n                            <animated.path\r\n                                // compute interpolated path d attribute from intermediate angle values\r\n                                d={interpolate([props.startAngle, props.endAngle], (startAngle, endAngle) =>\r\n                                    path({\r\n                                        ...arc,\r\n                                        startAngle,\r\n                                        endAngle,\r\n                                    }),\r\n                                )}\r\n                                fill={getColor(arc)}\r\n                                onClick={() => onClickDatum(arc)}\r\n                                onTouchStart={() => onClickDatum(arc)}\r\n                            />\r\n                            {hasSpaceForLabel && (\r\n                                <animated.g style={{ opacity: props.opacity }}>\r\n                                    <text\r\n                                        fill=\"white\"\r\n                                        x={centroidX}\r\n                                        y={centroidY}\r\n                                        dy=\".33em\"\r\n                                        fontSize={11}\r\n                                        textAnchor=\"middle\"\r\n                                        pointerEvents=\"none\"\r\n                                    >\r\n                                        {getKey(arc)}\r\n                                    </text>\r\n                                </animated.g>\r\n                            )}\r\n                        </g>\r\n                    );\r\n                },\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Group } from '@visx/group';\r\nimport { AreaClosed } from '@visx/shape';\r\nimport { AxisLeft, AxisBottom, AxisScale } from '@visx/axis';\r\nimport { LinearGradient } from '@visx/gradient';\r\nimport { curveMonotoneX } from '@visx/curve';\r\nimport { AppleStock } from '@visx/mock-data/lib/mocks/appleStock';\r\n\r\n// Initialize some variables\r\nconst axisColor = '#fff';\r\nconst axisBottomTickLabelProps = {\r\n    textAnchor: 'middle' as const,\r\n    fontFamily: 'Arial',\r\n    fontSize: 10,\r\n    fill: axisColor,\r\n};\r\nconst axisLeftTickLabelProps = {\r\n    dx: '-0.25em',\r\n    dy: '0.25em',\r\n    fontFamily: 'Arial',\r\n    fontSize: 10,\r\n    textAnchor: 'end' as const,\r\n    fill: axisColor,\r\n};\r\n\r\n// accessors\r\nconst getDate = (d: AppleStock) => new Date(d.date);\r\nconst getStockValue = (d: AppleStock) => d.close;\r\n\r\nexport default function AreaChart({\r\n                                      data,\r\n                                      gradientColor,\r\n                                      width,\r\n                                      yMax,\r\n                                      margin,\r\n                                      xScale,\r\n                                      yScale,\r\n                                      hideBottomAxis = false,\r\n                                      hideLeftAxis = false,\r\n                                      top,\r\n                                      left,\r\n                                      children,\r\n                                  }: {\r\n    data: AppleStock[];\r\n    gradientColor: string;\r\n    xScale: AxisScale<number>;\r\n    yScale: AxisScale<number>;\r\n    width: number;\r\n    yMax: number;\r\n    margin: { top: number; right: number; bottom: number; left: number };\r\n    hideBottomAxis?: boolean;\r\n    hideLeftAxis?: boolean;\r\n    top?: number;\r\n    left?: number;\r\n    children?: React.ReactNode;\r\n}) {\r\n    if (width < 10) return null;\r\n    return (\r\n        <Group left={left || margin.left} top={top || margin.top}>\r\n            <LinearGradient\r\n                id=\"gradient\"\r\n                from={gradientColor}\r\n                fromOpacity={1}\r\n                to={gradientColor}\r\n                toOpacity={0.2}\r\n            />\r\n            <AreaClosed<AppleStock>\r\n                data={data}\r\n                x={d => xScale(getDate(d)) || 0}\r\n                y={d => yScale(getStockValue(d)) || 0}\r\n                yScale={yScale}\r\n                strokeWidth={1}\r\n                stroke=\"url(#gradient)\"\r\n                fill=\"url(#gradient)\"\r\n                curve={curveMonotoneX}\r\n            />\r\n            {!hideBottomAxis && (\r\n                <AxisBottom\r\n                    top={yMax}\r\n                    scale={xScale}\r\n                    numTicks={width > 520 ? 10 : 5}\r\n                    stroke={axisColor}\r\n                    tickStroke={axisColor}\r\n                    tickLabelProps={() => axisBottomTickLabelProps}\r\n                />\r\n            )}\r\n            {!hideLeftAxis && (\r\n                <AxisLeft\r\n                    scale={yScale}\r\n                    numTicks={5}\r\n                    stroke={axisColor}\r\n                    tickStroke={axisColor}\r\n                    tickLabelProps={() => axisLeftTickLabelProps}\r\n                />\r\n            )}\r\n            {children}\r\n        </Group>\r\n    );\r\n}\r\n","import React, { useRef, useState, useMemo } from 'react';\r\nimport { scaleTime, scaleLinear } from '@visx/scale';\r\nimport appleStock, { AppleStock } from '@visx/mock-data/lib/mocks/appleStock';\r\nimport { Brush } from '@visx/brush';\r\nimport { Bounds } from '@visx/brush/lib/types';\r\nimport BaseBrush, { BaseBrushState, UpdateBrush } from '@visx/brush/lib/BaseBrush';\r\nimport { PatternLines } from '@visx/pattern';\r\nimport { LinearGradient } from '@visx/gradient';\r\nimport { max, extent } from 'd3-array';\r\n\r\nimport AreaChart from './AreaChart';\r\n\r\n// Initialize some variables\r\nconst stock = appleStock.slice(1000);\r\nconst brushMargin = { top: 10, bottom: 15, left: 50, right: 20 };\r\nconst chartSeparation = 30;\r\nconst PATTERN_ID = 'brush_pattern';\r\nconst GRADIENT_ID = 'brush_gradient';\r\nexport const accentColor = 'rgba(130,179,246,0.72)';\r\nexport const background = '#2a3358';\r\nexport const background2 = '#00acd1';\r\nconst selectedBrushStyle = {\r\n    fill: `url(#${PATTERN_ID})`,\r\n    stroke: 'white',\r\n};\r\n\r\n// accessors\r\nconst getDate = (d: AppleStock) => new Date(d.date);\r\nconst getStockValue = (d: AppleStock) => d.close;\r\n\r\nexport type BrushProps = {\r\n    width: number;\r\n    height: number;\r\n    margin?: { top: number; right: number; bottom: number; left: number };\r\n    compact?: boolean;\r\n};\r\n\r\nfunction BrushChart({\r\n                        compact = false,\r\n                        width,\r\n                        height,\r\n                        margin = {\r\n                            top: 20,\r\n                            left: 50,\r\n                            bottom: 20,\r\n                            right: 20,\r\n                        },\r\n                    }: BrushProps) {\r\n    const brushRef = useRef<BaseBrush | null>(null);\r\n    const [filteredStock, setFilteredStock] = useState(stock);\r\n\r\n    const onBrushChange = (domain: Bounds | null) => {\r\n        if (!domain) return;\r\n        const { x0, x1, y0, y1 } = domain;\r\n        const stockCopy = stock.filter(s => {\r\n            const x = getDate(s).getTime();\r\n            const y = getStockValue(s);\r\n            return x > x0 && x < x1 && y > y0 && y < y1;\r\n        });\r\n        setFilteredStock(stockCopy);\r\n    };\r\n\r\n    const innerHeight = height - margin.top - margin.bottom;\r\n    const topChartBottomMargin = compact ? chartSeparation / 2 : chartSeparation + 10;\r\n    const topChartHeight = 0.8 * innerHeight - topChartBottomMargin;\r\n    const bottomChartHeight = innerHeight - topChartHeight - chartSeparation;\r\n\r\n    // bounds\r\n    const xMax = Math.max(width - margin.left - margin.right, 0);\r\n    const yMax = Math.max(topChartHeight, 0);\r\n    const xBrushMax = Math.max(width - brushMargin.left - brushMargin.right, 0);\r\n    const yBrushMax = Math.max(bottomChartHeight - brushMargin.top - brushMargin.bottom, 0);\r\n\r\n    // scales\r\n    const dateScale = useMemo(\r\n        () =>\r\n            scaleTime<number>({\r\n                range: [0, xMax],\r\n                domain: extent(filteredStock, getDate) as [Date, Date],\r\n            }),\r\n        [xMax, filteredStock],\r\n    );\r\n    const stockScale = useMemo(\r\n        () =>\r\n            scaleLinear<number>({\r\n                range: [yMax, 0],\r\n                domain: [0, max(filteredStock, getStockValue) || 0],\r\n                nice: true,\r\n            }),\r\n        [yMax, filteredStock],\r\n    );\r\n    const brushDateScale = useMemo(\r\n        () =>\r\n            scaleTime<number>({\r\n                range: [0, xBrushMax],\r\n                domain: extent(stock, getDate) as [Date, Date],\r\n            }),\r\n        [xBrushMax],\r\n    );\r\n    const brushStockScale = useMemo(\r\n        () =>\r\n            scaleLinear({\r\n                range: [yBrushMax, 0],\r\n                domain: [0, max(stock, getStockValue) || 0],\r\n                nice: true,\r\n            }),\r\n        [yBrushMax],\r\n    );\r\n\r\n    const initialBrushPosition = useMemo(\r\n        () => ({\r\n            start: { x: brushDateScale(getDate(stock[50])) },\r\n            end: { x: brushDateScale(getDate(stock[100])) },\r\n        }),\r\n        [brushDateScale],\r\n    );\r\n\r\n    // event handlers\r\n    const handleClearClick = () => {\r\n        if (brushRef?.current) {\r\n            setFilteredStock(stock);\r\n            brushRef.current.reset();\r\n        }\r\n    };\r\n\r\n    const handleResetClick = () => {\r\n        if (brushRef?.current) {\r\n            const updater: UpdateBrush = prevBrush => {\r\n                const newExtent = brushRef.current!.getExtent(\r\n                    initialBrushPosition.start,\r\n                    initialBrushPosition.end,\r\n                );\r\n\r\n                const newState: BaseBrushState = {\r\n                    ...prevBrush,\r\n                    start: { y: newExtent.y0, x: newExtent.x0 },\r\n                    end: { y: newExtent.y1, x: newExtent.x1 },\r\n                    extent: newExtent,\r\n                };\r\n\r\n                return newState;\r\n            };\r\n            brushRef.current.updateBrush(updater);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <svg width={width} height={height}>\r\n                <LinearGradient id={GRADIENT_ID} from={background} to={background2} rotate={45} />\r\n                <rect x={0} y={0} width={width} height={height} fill={`url(#${GRADIENT_ID})`} rx={14} />\r\n                <AreaChart\r\n                    hideBottomAxis={compact}\r\n                    data={filteredStock}\r\n                    width={width}\r\n                    margin={{ ...margin, bottom: topChartBottomMargin }}\r\n                    yMax={yMax}\r\n                    xScale={dateScale}\r\n                    yScale={stockScale}\r\n                    gradientColor={background2}\r\n                />\r\n                <AreaChart\r\n                    hideBottomAxis\r\n                    hideLeftAxis\r\n                    data={stock}\r\n                    width={width}\r\n                    yMax={yBrushMax}\r\n                    xScale={brushDateScale}\r\n                    yScale={brushStockScale}\r\n                    margin={brushMargin}\r\n                    top={topChartHeight + topChartBottomMargin + margin.top}\r\n                    gradientColor={background2}\r\n                >\r\n                    <PatternLines\r\n                        id={PATTERN_ID}\r\n                        height={8}\r\n                        width={8}\r\n                        stroke={accentColor}\r\n                        strokeWidth={1}\r\n                        orientation={['diagonal']}\r\n                    />\r\n                    <Brush\r\n                        xScale={brushDateScale}\r\n                        yScale={brushStockScale}\r\n                        width={xBrushMax}\r\n                        height={yBrushMax}\r\n                        margin={brushMargin}\r\n                        handleSize={8}\r\n                        innerRef={brushRef}\r\n                        resizeTriggerAreas={['left', 'right']}\r\n                        brushDirection=\"horizontal\"\r\n                        initialBrushPosition={initialBrushPosition}\r\n                        onChange={onBrushChange}\r\n                        onClick={() => setFilteredStock(stock)}\r\n                        selectedBoxStyle={selectedBrushStyle}\r\n                    />\r\n                </AreaChart>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BrushChart;\r\n","import React, {FunctionComponent } from 'react';\nimport { render } from 'react-dom';\nimport ParentSize from '@visx/responsive/lib/components/ParentSize';\nimport App from './App';\nimport VisibleComponent from './visibleComponent';\nimport ComponentExplanation from './componentExplanation';\nimport Parent from './parent';\nimport styles from './myName.module.css';\nimport PieChart from './Pie'\nimport BrushChart from './AreaChartComponent'\nimport CSS from 'csstype';\n\nimport { animated, useTransition, interpolate } from 'react-spring';\nimport Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';\nimport { scaleOrdinal } from '@visx/scale';\nimport { Group } from '@visx/group';\nimport { GradientPinkBlue } from '@visx/gradient';\nimport letterFrequency, { LetterFrequency } from '@visx/mock-data/lib/mocks/letterFrequency';\nimport browserUsage, { BrowserUsage as Browsers } from '@visx/mock-data/lib/mocks/browserUsage';\n\n\nvar slide = 0;\n\n\ntype CardProps = {\n    title: string,\n    paragraph: string\n}\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\ntype ClockState = {\n    input: string\n    time: Date\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport class Clock extends React.Component<{}, ClockState> {\n\n    // The tick function sets the current state. TypeScript will let us know\n    // which ones we are allowed to set.\n    tick() {\n        this.setState({\n            time: new Date()\n        });\n    }\n\n    // Before the component mounts, we initialise our state\n    componentWillMount() {\n        this.tick();\n    }\n\n    // After the component did mount, we set the state each second.\n    componentDidMount() {\n        setInterval(() => this.tick(), 1000);\n    }\n\n    // render will know everything!\n    render() {\n        return <p>The current time is {this.state.time.toLocaleTimeString()}</p>\n    }\n}\n\n// we can use children even though we haven't defined them in our CardProps\nexport const Card: FunctionComponent<CardProps> = ({ title, paragraph, children }) => <aside>\n    <h2>{ title }</h2>\n    <p>\n        { paragraph }\n    </p>\n    { children }\n</aside>\n\nconst el = <Card title=\"Welcome!\" paragraph=\"To this example\" />\n\n\n\n\n\n\n\n\n\ntype NoticeProps = {\n    msg: string\n}\n\nexport class Notice extends React.Component<NoticeProps> {\n\n    constructor(props: NoticeProps) {\n        super(props)\n    }\n\n    static defaultProps = {\n        msg: 'Hello everyone!'\n    }\n\n    render() {\n        return <p>{ this.props.msg }</p>\n    }\n}\n\nconst noticeEl = <Notice /> // Will compile in TS 3.0\n\n\n\n\n\n\ntype WrapperProps = {\n    clockEl : Clock\n}\n\nconst h1Styles: CSS.Properties = {\n    display: 'inline-block',\n    padding: '0.35em 1.2em',\n    boxSizing: 'border-box',\n    borderRadius: '0.12em',\n    border: '0.1em solid #FFFFFF',\n    margin: '0 0.3em 0.3em 0',\n    textDecoration: 'none',\n    transition: 'all 0.2s',\n    backgroundColor: 'rgb(0,0,0)',\n    float: 'left',\n    color : 'white',\n    fontFamily: 'sans-serif',\n    font: 'Montserrat',\n    fontSize: '10px',\n\n};\n\nconst titleStyle: CSS.Properties = {\n    textAlign: 'center',\n    color: 'white',\n    fontFamily: 'sans-serif',\n    font: 'montserrat',\n    fontSize: '40px',\n    opacity:'1'\n}\nconst explanationStyle: CSS.Properties = {\n    float: 'left',\n    color: 'white',\n    width: '500px',\n    fontSize: '26px',\n //   background: '#15182f',\n    borderRadius: '15px', /*All corners*/\n    padding:'10px',\n    top:'140px',\n    right:'30%',\n    opacity:'1',\n}\n\nconst PieTitle = \"Interactive Pie/Donut Chart\"\nconst BrushTitle = \"Brush Chart\"\nexport class PieExplanation extends React.Component {\n    render() {\n        return <ul>\n            <li>User portfolio breakdown</li>\n            <li>Institutional ownership</li>\n            <li>Sectors</li>\n        </ul>\n    }\n}\nexport class BrushExplanation extends React.Component {\n    render() {\n        return <ul>\n            <li>Mini charts for when more complex charts would be impractical</li>\n            <li>User equity/drawdown graph</li>\n        </ul>\n    }\n}\n\nexport class Wrapper extends React.Component {\n\n\n    render() {\n        return <div style={ { display: 'flex' } }>\n            { this.props.children }\n        </div>\n    }\n}\n\nexport class Button extends React.Component<{},{clicks:number}> {\n    constructor(props: {} | Readonly<{}>){\n        super(props);\n        this.state = {\n            clicks: 0\n        }\n    }\n\n    handleClick(event: MouseEvent) {\n        event.preventDefault();\n\n        this.setState((prevState) => ({\n            // @ts-ignore\n            clicks: Math.min(prevState.clicks + 1,1)\n\n              }));\n\n        //this.setState({clicks:this.state.clicks+1 })\n        //alert(event.currentTarget.tagName); // alerts BUTTON\n    }\n\n    handleClick2(event: MouseEvent) {\n        event.preventDefault();\n\n        this.setState((prevState) => ({\n            // @ts-ignore\n            clicks: Math.max(0,prevState.clicks - 1)\n        }));\n    }\n\n    render(){\n\n        return (\n\n            <div>\n                <h1 style={titleStyle}>{this.state.clicks==0 ? PieTitle : BrushTitle}</h1>\n                <div>\n                    <div style={{float:\"left\",paddingTop:'120px',paddingLeft:'120px'}}>\n                        {this.state.clicks==0 ? <PieChart width={window.innerWidth/2} height={window.innerHeight/2}/> :\n                              <BrushChart width={window.innerWidth/2} height={window.innerHeight/2}/>\n                        }\n                    </div>\n                    <div style={{float:\"left\",paddingTop:'120px'}}>\n                        <div style={explanationStyle}>\n                            {this.state.clicks == 0 ? <PieExplanation /> : <BrushExplanation />}\n\n                            <div style={{float:'left'}}>\n                                <button style={h1Styles} id={\"componentExplanation2\"}\n                                    // @ts-ignore\n                                        onClick={this.handleClick2.bind(this)}>\n                                    <h2>Prev</h2>\n                                </button>\n                                <button style={h1Styles} id={\"componentExplanation\"}\n                                    // @ts-ignore\n                                        onClick={this.handleClick.bind(this)}>\n                                    <h2>Next</h2>\n                                </button>\n                          </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n        )\n\n        // @ts-ignore\n      /*  return (<button id=\"button1\" onClick={this.handleClick.bind(this)}>\n            <h2>Button1 + {this.state.clicks}</h2>\n        </button>\n        )*/\n    }\n}\n\nfunction fadeOutEffect() {\n    var fadeTarget = document.getElementById(\"wrap\");\n    var fadeEffect = setInterval(function () {\n        // @ts-ignore\n        if (!fadeTarget.style.opacity) {\n            // @ts-ignore\n            fadeTarget.style.opacity = String(1);\n        }\n        // @ts-ignore\n        if (fadeTarget.style.opacity > 0) {\n            // @ts-ignore\n                 fadeTarget.style.opacity -= 0.1;\n        } else {\n            clearInterval(fadeEffect);\n        }\n    }, 30);\n\n}\n\n// @ts-ignore\n//document.getElementById(\"componentExplanation\").addEventListener('click', fadeOutEffect)\n\nrender (<Button />,document.getElementById('wrap'))\n\n// Nothing should be rendered!\n/*\nconsole.log(\"Clicks\")\nrender(<Parent />,document.getElementById('root'))\n*/"],"sourceRoot":""}